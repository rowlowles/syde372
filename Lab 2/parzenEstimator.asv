function [x] = parzenEstimator( input_data, sigma)
%UNTITLED3 Summary of this function goes here
%   Detailed explanation goes here

dims = size(input_data);
length = dims(2);
pdf = zeros(1,length);
% input_data = sort(input_data);
% h = .1;
h = 15/sqrt(length);
for j = 0.1:.1:10
    foo = int8(j*10);
    x = j;
    pointSum = 0;
    for i = 1:length
        
        u = -(x - input_data(i))^2/(2*sigma^2);
        gaussKernel = (1/(sigma*sqrt(2 * pi)))*exp(u);
        
        pointSum = pointSum + gaussKernel;
    end
    % j is x step, pointSum/length is y value
    % pdf(foo,:) = j, pointSum/length;
    pdf(foo) = pointSum/length;
end
% plot(pdf)
% x = pdf;
figure;
plot


    % If not 2D, pad w/ zeroes
%     
%     if dims(1) ~= 2
%         zeroMatrix = zeros(1,dims(2));
%         input_data = [input_data; zeroMatrix];
%     end
%     
%     
%     gaussFilt = fspecial('gaussian',7,sigma);
%     gaussFilt = gaussFilt(4,:);
%     res = [.01 min(input_data(1,:)) min(input_data(2,:)) max(input_data(1,:)) max(input_data(2,:))]; 
%     input_data = input_data';
%     [xPar,yPar,p] = parzen(input_data, res, gaussFilt);
%     x = xPar;
%     y = yPar;
end

