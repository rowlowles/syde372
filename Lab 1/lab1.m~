% Lab 1
close all;
clear all;
% Generate clusters
% Class A
nA = 200;
muA = [5;10];
sigmaA = [8 0; 0 4];
classA = repmat(muA',[nA, 1])  + randn(nA,2)*chol(sigmaA);
meanA = mean(classA);

% Class B
nB = 200;
muB = [10;15];
sigmaB = [8 0; 0 4];
classB = repmat(muB',[nB, 1]) + randn(nB,2)*chol(sigmaB);
meanB = mean(classB);

% Class C
nC = 100;
muC = [5;10];
sigmaC = [8 4; 4 40];
classC = repmat(muC',[nC, 1]) + randn(nC,2)*chol(sigmaC);
meanC = mean(classC);


% Class D
nD = 200;
muD = [15;10];
sigmaD = [8 0; 0 8];
classD = repmat(muD',[nD, 1]) + randn(nD,2)*chol(sigmaD);
meanD = mean(classD);

% Class E
nE = 150;
muE = [10;5];
sigmaE = [10 -5; -5 20];
classE = repmat(muE',[nE, 1]) + randn(nE,2)*chol(sigmaE);
meanE = mean(classE);


% Plot the distributions' means
% Plot distribution A & B and STD contour
clusters1 = figure;
plotClasses(classA,'Class A',classB,'Class B');
hold on; 
plotStdContours([1], meanA, sigmaA, meanB, sigmaB);



% Plot distribution C, D & E and STD contour
clusters2 = figure;
plotClasses(classC,'Class C',classD,'Class D', classE,'Class E');
hold on; 
plotStdContours([1], meanC, sigmaC, meanD, sigmaD, meanE, sigmaE);


%% MED Classifier
% Step 1: Find distance between two points

figure(clusters1)
% g(x) = [a b c] in form aX_1 + bX_2 + c = 0
gx = [(muA - muB)', .5*(muB'*muB - muA'*muA)];
vec = [-gx(2)/gx(1) -gx(3)/gx(1)];
refline(vec(1), vec(2))

figure(clusters2)
gx = [(muC - muE)', .5*(muE'*muE - muC'*muC)];
vec = [-gx(2)/gx(1) -gx(3)/gx(1)];
refline(vec(1), vec(2))

gx = [(muD - muE)', .5*(muE'*muE - muD'*muD)];
vec = [-gx(2)/gx(1) -gx(3)/gx(1)];
refline(vec(1), vec(2))


%% Nearest Neighbour
[X_nn1, Y_nn1, classifier_nn1] = nearestNeighbourFilter(1,classA, 'Class A', classB, 'Class B');
[X_nn2, Y_nn2, classifier_nn2] = nearestNeighbourFilter(1,classC,'Class C',classD,'Class D', classE,'Class E');

% Create test data

% Calculate error
nn1_classify = classifyPoints(X_nn1, Y_nn1, classifier_nn1, classA, 1, classB, 2);
conf_nn1 = confusionmat(nn1_classify(:,1),nn1_classify(:,2));
error_nn1 = size(find(nn1_classify(:,1) ~= nn1_classify(:,2)),1)/size(nn1_classify,1);

nn2_classify = classifyPoints(X_nn2, Y_nn2, classifier_nn2, classC, 1, classD, 2, classE, 3);
conf_nn2 = confusionmat(nn2_classify(:,1),nn2_classify(:,2));
error_nn2 = size(find(nn2_classify(:,1) ~= nn2_classify(:,2)),1)/size(nn2_classify,1);


%% 5 Nearest Neighbour
[X_nn5_1, Y_nn5_1, classifier_nn5_1] = nearestNeighbourFilter(5,classA, 'Class A', classB, 'Class B');
[X_nn5_2, Y_nn5_2, classifier_nn5_2] = nearestNeighbourFilter(5,classC,'Class C',classD,'Class D', classE,'Class E');

% Calculate error
nn5_1_classify = classifyPoints(X_nn5_1, Y_nn5_1, classifier_nn5_1, classA, 1, classB, 2);
conf_nn5_1 = confusionmat(nn5_1_classify(:,1),nn5_1_classify(:,2));
error_nn5_1 = size(find(nn5_1_classify(:,1) ~= nn5_1_classify(:,2)),1)/size(nn5_1_classify,1);

nn5_2_classify = classifyPoints(X_nn5_2, Y_nn5_2, classifier_nn5_2, classC, 1, classD, 2, classE, 3);
conf_nn5_2 = confusionmat(nn5_2_classify(:,1),nn5_2_classify(:,2));
error_nn5_2 = size(find(nn5_2_classify(:,1) ~= nn5_2_classify(:,2)),1)/size(nn5_2_classify,1);

